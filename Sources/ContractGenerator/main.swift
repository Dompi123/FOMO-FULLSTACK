import Foundation

// MARK: - Models
struct HTTPMethod: RawRepresentable, Equatable {
    let rawValue: String
    
    static let get = HTTPMethod(rawValue: "GET")
    static let post = HTTPMethod(rawValue: "POST")
    static let put = HTTPMethod(rawValue: "PUT")
    static let delete = HTTPMethod(rawValue: "DELETE")
    
    init(rawValue: String) {
        self.rawValue = rawValue.uppercased()
    }
}

struct APIContract {
    let name: String
    let path: String
    let method: HTTPMethod
    let requestType: String?
    let responseType: String
}

enum GeneratorError: Error {
    case invalidSchema
    case fileSystemError
}

// MARK: - Generator
struct APIContractGenerator {
    static func generateContracts() throws {
        let outputPath = "apps/shared/API"
        
        // Create output directory
        if !FileManager.default.fileExists(atPath: outputPath) {
            try FileManager.default.createDirectory(atPath: outputPath, withIntermediateDirectories: true, attributes: nil)
            print("‚úÖ Created output directory: \(outputPath)")
        }
        
        // Generate contracts
        let contracts = [
            APIContract(name: "GetVenues", path: "/venues", method: .get, requestType: nil, responseType: "[Venue]"),
            APIContract(name: "GetVenue", path: "/venues/{id}", method: .get, requestType: nil, responseType: "Venue"),
            APIContract(name: "GetDrinks", path: "/venues/{venueId}/drinks", method: .get, requestType: nil, responseType: "[Drink]"),
            APIContract(name: "GetPasses", path: "/passes", method: .get, requestType: nil, responseType: "[Pass]"),
            APIContract(name: "PurchasePass", path: "/venues/{venueId}/passes/purchase", method: .post, requestType: "PassPurchaseRequest", responseType: "Pass"),
            APIContract(name: "PlaceOrder", path: "/venues/{venueId}/orders", method: .post, requestType: "OrderRequest", responseType: "Order"),
            APIContract(name: "GetProfile", path: "/profile", method: .get, requestType: nil, responseType: "UserProfile"),
            APIContract(name: "UpdateProfile", path: "/profile/update", method: .post, requestType: "ProfileUpdateRequest", responseType: "UserProfile")
        ]
        
        // Generate Models
        let modelCode = """
        // Generated by generate-api-contracts.swift
        // Do not edit directly
        
        import Foundation
        
        public struct Venue: Codable {
            public let id: String
            public let name: String
            public let description: String
            public let address: String
            public let imageUrl: String
            public let capacity: Int
            public let currentCapacity: Int
            public let rating: Double
            public let isOpen: Bool
            public let waitTime: Int
            
            public init(id: String, name: String, description: String, address: String, imageUrl: String, capacity: Int, currentCapacity: Int, rating: Double, isOpen: Bool, waitTime: Int) {
                self.id = id
                self.name = name
                self.description = description
                self.address = address
                self.imageUrl = imageUrl
                self.capacity = capacity
                self.currentCapacity = currentCapacity
                self.rating = rating
                self.isOpen = isOpen
                self.waitTime = waitTime
            }
        }
        
        public struct Pass: Codable {
            public let id: String
            public let venueId: String
            public let userId: String
            public let type: String
            public let status: String
            
            public init(id: String, venueId: String, userId: String, type: String, status: String) {
                self.id = id
                self.venueId = venueId
                self.userId = userId
                self.type = type
                self.status = status
            }
        }
        
        public struct Drink: Codable {
            public let id: String
            public let name: String
            public let description: String
            public let price: Double
            public let imageUrl: String
            
            public init(id: String, name: String, description: String, price: Double, imageUrl: String) {
                self.id = id
                self.name = name
                self.description = description
                self.price = price
                self.imageUrl = imageUrl
            }
        }
        
        public struct UserProfile: Codable {
            public let id: String
            public let name: String
            public let email: String
            public let phoneNumber: String?
            
            public init(id: String, name: String, email: String, phoneNumber: String?) {
                self.id = id
                self.name = name
                self.email = email
                self.phoneNumber = phoneNumber
            }
        }
        """
        
        let modelsPath = "\(outputPath)/Models.swift"
        try modelCode.write(toFile: modelsPath, atomically: true, encoding: String.Encoding.utf8)
        print("‚úÖ Generated Models.swift")
        
        // Generate Endpoints
        let endpointCode = """
        // Generated by generate-api-contracts.swift
        // Do not edit directly
        
        import Foundation
        
        public enum APIEndpoint {
            case getVenues
            case getVenue(venueId: String)
            case getDrinks(venueId: String)
            case getPasses
            case purchasePass(venueId: String)
            case placeOrder(venueId: String, drinkIds: [String])
            case profile
            case updateProfile(name: String, email: String, phoneNumber: String?)
            
            public var path: String {
                switch self {
                case .getVenues:
                    return "/venues"
                case .getVenue(let vid):
                    let path = String(format: "/venues/%@", vid)
                    return path
                case .getDrinks(let vid):
                    let path = String(format: "/venues/%@/drinks", vid)
                    return path
                case .getPasses:
                    return "/passes"
                case .purchasePass(let vid):
                    let path = String(format: "/venues/%@/passes/purchase", vid)
                    return path
                case .placeOrder(let vid, _):
                    let path = String(format: "/venues/%@/orders", vid)
                    return path
                case .profile:
                    return "/profile"
                case .updateProfile:
                    return "/profile/update"
                }
            }
            
            public var method: String {
                switch self {
                case .getVenues, .getVenue, .getDrinks, .getPasses, .profile:
                    return "GET"
                case .purchasePass, .placeOrder, .updateProfile:
                    return "POST"
                }
            }
        }
        """
        
        let endpointsPath = "\(outputPath)/Endpoints.swift"
        try endpointCode.write(toFile: endpointsPath, atomically: true, encoding: String.Encoding.utf8)
        print("‚úÖ Generated Endpoints.swift")
        
        print("‚úÖ Generated \(contracts.count) API contracts")
        print("üì¶ Output directory: \(outputPath)")
    }
}

// MARK: - Main
do {
    try APIContractGenerator.generateContracts()
} catch {
    print("‚ùå Error generating API contracts: \(error)")
    exit(1)
} 